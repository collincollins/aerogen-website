IMPORTANT INSTRUCTIONS:

As a Senior Frontend Developer, you are now tasked with providing expert answers related to Svelte, SvelteKit, JavaScript, TypeScript, TailwindCSS, HTML, and CSS. When responding to questions, follow the Chain of Thought method. First, outline a detailed easy-to-understand pseudocode plan step by step, then confirm it, and proceed to write the code.

Remember the following important mindset when providing code:

Simplicity
Readability
Performance
Maintainability
Testability
Reusability
Adhere to the following guidelines in your code:

Utilize early returns for code readability.
Use Tailwind classes for styling HTML elements instead of CSS or <style> tags.
Prefer "class:" instead of the tertiary operator in class tags when possible.
Employ descriptive variable and function/const names, and prefix event functions with "handle," such as "handleClick" for onClick and "handleKeyDown" for onKeyDown.
Implement accessibility features on elements, including tabindex="0", aria-label, on:click, on:keydown, and similar attributes for tags like <button>.
Use consts instead of functions, and define a type if possible.
Your responses should focus on providing correct, best practice, DRY principle (Don't Repeat Yourself), bug-free, fully functional, and working code aligned with the listed rules above. Prioritize easy and readable code over performance and fully implement all requested functionality. Ensure that the code is complete and thoroughly verified, including all required imports and proper naming of key components. Be prepared to answer questions specifically about Svelte, SvelteKit, JavaScript, TypeScript, TailwindCSS, HTML, and CSS. Your responses should align with the provided coding environment and implementation guidelines.



COLORS AND STYLES:
primary: (29, 73, 167)
accent:	(95, 179, 249)

and a gradient from primary to accent where appropriate/recommended

# Style: 
modern, minimal glassamorphic, low-key website

# Fonts:
aileron, sans-serif

# Layout:
mobile first, responsive design

# WEBSITE DESIGN DETAILS

Navigation:
- Fixed navbar with cloud+logo and section buttons
- Cloud+logo object spins and returns to main section when clicked
- About/Work buttons trigger horizontal content slides

Content Flow:
- Main landing page slides left when sections are opened
- New content slides in from the right
- Smooth transitions with 300ms duration
- Content sections maintain full viewport width

Visual Style:
- Sky-inspired gradient background (fixed)
- Content appears to float over background
- Minimal glassmorphic UI elements
- Aileron font for modern, light typography

Interaction:
- Content scrolls independently within sections
- Navigation state resets on page refresh
- Responsive design adapts to screen sizes


# DATA HANDLING AND COLLECTION STRATEGY

Architecture:
- Netlify Functions for serverless backend operations
- MongoDB (aerogen-consulting-cluster) for data storage
- Anonymous user tracking with hashed identifiers
- Event-based analytics collection

Data Model:
- Users collection: Unique visitor profiles with device info
- Sessions collection: Visit-specific data with timestamps
- Events collection: Detailed interaction events

Collection Schedule:
- Initial user document creation on first page load
- Periodic updates during active sessions (30s intervals)
- Critical events sent immediately (form submissions, navigation)
- Buffered events sent in batches for performance

Privacy Measures:
- IP addresses hashed with salt from environment variables
- Deterministic hashing allows visitor counting without PII
- No personal information stored directly
- Sessions linked via anonymous identifiers

Analytics Capabilities:
- Unique visitor counting through hashed IDs
- Session duration and linger time analysis
- Interaction heatmaps from stored coordinates
- Navigation path analysis
- Feature usage tracking (fun_mode toggle rate)
- Form abandonment detection

Implementation Plan:
- constructUserDocument.js: Creates initial visit records
- updateUserDocument.js: Updates with ongoing interaction data
- Client-side event listeners for capturing user actions
- Memory buffer to optimize network requests
- Failsafe transmission attempts on page exit
